% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/return_hyper.R
\name{plot.forecast_model_hyper}
\alias{plot.forecast_model_hyper}
\title{Plot hyperparameters}
\usage{
\method{plot}{forecast_model_hyper}(x, data_results, data_error,
  type = c("stability", "error"), horizons = NULL, windows = NULL,
  ...)
}
\arguments{
\item{x}{An object of class 'forecast_model_hyper' from \code{return_hyper()}.}

\item{data_results}{An object of class 'training_results' from
\code{predict.forecast_model(..., data_forecast = NULL)}.}

\item{data_error}{An object of class 'validation_error' from
\code{return_error(..., data_test = NULL)}.}

\item{type}{Select plot type; 'stability' is the default plot.}

\item{horizons}{Optional. A numeric vector to filter results by horizon.}

\item{windows}{Optional. A numeric vector to filter results by validation window number.}

\item{...}{Arguments passed to \code{base::plot()}}
}
\value{
Hyperparameter plots of class 'ggplot'.
}
\description{
Plot hyperparameter stability and relationship with error metrics across validation datasets.
}
\examples{
\donttest{
# Sampled Seatbelts data from the R package datasets.
data("data_seatbelts", package = "forecastML")

# Example - Training data for 2 horizon-specific models w/ common lags per predictor.
horizons <- c(1, 12)
lookback <- 1:15

data_train <- create_lagged_df(data_seatbelts, type = "train", outcome_cols = 1,
                               lookback = lookback, horizon = horizons)

windows <- create_windows(data_train, window_length = 12)

# User-define model - LASSO
# The model takes in a data.frame with a target and predictors with exactly the same format as
# in create_lagged_df(). 'outcome_cols' is the column index of the target. The
# model returns a model object suitable for a predict-type function.
library(glmnet)
model_function <- function(data, outcome_cols = 1) {

  x <- data[, -(outcome_cols), drop = FALSE]
  y <- data[, outcome_cols, drop = FALSE]
  x <- as.matrix(x, ncol = ncol(x))
  y <- as.matrix(y, ncol = ncol(y))

  model <- glmnet::cv.glmnet(x, y)
  return(model)
}

model_results <- train_model(data_train, windows,
                             model_function, model_name = "LASSO")

# User-defined prediction function - LASSO
# The predict() wrapper takes two positional arguments. First,
# the returned model from the user-defined modeling function (model_function() above).
# Second, a data.frame of predictors--identical to the datasets returned from
# create_lagged_df(..., type = "train"). The function can return a 1- or 3-column data.frame
# with either (a) point forecasts or (b) point forecasts plus lower and upper forecast
# bounds (column order and column names do not matter).
prediction_function <- function(model, data_features) {

  x <- as.matrix(data_features, ncol = ncol(data_features))

  data_pred <- data.frame("y_pred" = predict(model, x, s = "lambda.min"))
  return(data_pred)
}

# Predict on the validation datasets.
data_valid <- predict(model_results, prediction_function = list(prediction_function),
                      data = data_train)

# User-defined hyperparameter function - LASSO
# The hyperparameter function should take one positional argument--the returned model
# from the user-defined modeling function (model_function() above). It should
# return a 1-row data.frame of the optimal hyperparameters.
hyper_function <- function(model) {

  lambda_min <- model$lambda.min
  lambda_1se <- model$lambda.1se

  data_hyper <- data.frame("lambda_min" = lambda_min, "lambda_1se" = lambda_1se)
  return(data_hyper)
}

data_error <- return_error(data_valid)

data_hyper <- return_hyper(model_results, hyper_function)

plot(data_hyper, data_valid, data_error, type = "stability",
     horizons = c(1, 12))

plot(data_hyper, data_valid, data_error, type = "error")
}
}
