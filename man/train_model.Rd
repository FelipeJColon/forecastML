% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train_model.R
\name{train_model}
\alias{train_model}
\title{Train a model across horizons and validation datasets}
\usage{
train_model(lagged_df, windows, model_function, model_name,
  use_future = FALSE)
}
\arguments{
\item{lagged_df}{An object of class 'lagged_df' from \code{create_lagged_df}.}

\item{windows}{An object of class 'windows' from \code{create_windows}.}

\item{model_function}{A user-defined wrapper function for model training that takes 2
positional arguments--(1) a data.frame made with \code{create_lagged_df} and
(2) the column index of the modeled outcome--and returns a model which is used
as input in the user-defined prediction function (see example).}

\item{model_name}{A name for the model. Required.}

\item{use_future}{Boolean. If \code{TRUE}, the \code{future} package is used for training models in parallel.
There are two options for parallelization: parallel across either (1) model forecast horizons or (b) validation windows.
If forecasting with many horizon-specific models, consider running
\code{future::plan(list(future::multiprocess, future::sequential))} prior to this function to train these models
in parallel. If forecasting across many validation windows, consider running
\code{future::plan(list(future::sequential, future::multiprocess))} prior to this function to train these models
in parallel.}
}
\value{
A 'forecast_model' S3 object: A nested list of trained models. Models can be accessed with
\code{my_trained_model$horizon_h$window_w} where 'h' gives the forecast horizon and 'w' gives
the validation dataset window numbwer from \code{create_windows}.
}
\description{
Train a user-defined forecast model for each horizon, h, and across the validation
datasets, d. A total of h * d models are trained--more if the user-defined modeling function
performs any inner-loop cross-validation. These models can, however, be trained in parallel
with the \code{future} package.
}
\section{Methods and related functions}{


The output of of \code{train_model} is passed into

has the following generic S3 methods

\itemize{
  \item \code{\link{predict}}
  \item \code{\link{plot}}
}
}

\examples{
\donttest{
# Sampled Seatbelts data from the R package datasets.
data("data_seatbelts", package = "forecastML")

# Example - Training data for 2 horizon-specific models w/ common lags per predictor.
horizons <- c(1, 12)
lookback <- 1:15

data_train <- create_lagged_df(data_seatbelts, type = "train", outcome_cols = 1,
                               lookback = lookback, horizon = horizons)

windows <- create_windows(data_train, window_length = 12)

# User-define model - LASSO
# The model takes in a data.frame with a target and predictors with exactly the same format as
# in create_lagged_df(). 'outcome_cols' is the column index of the target. The
# model returns a model object suitable for a predict-type function.
library(glmnet)
model_function <- function(data, outcome_cols = 1) {

  x <- data[, -(outcome_cols), drop = FALSE]
  y <- data[, outcome_cols, drop = FALSE]
  x <- as.matrix(x, ncol = ncol(x))
  y <- as.matrix(y, ncol = ncol(y))

  model <- glmnet::cv.glmnet(x, y)
  return(model)
}

model_results <- train_model(data_train, windows,
                             model_function, model_name = "LASSO")

# View the results for the model (a) trained on the first horizon
# and (b) to be assessed on the first outer-loop validation window.
model_results[[1]][[1]]$model
}
}
