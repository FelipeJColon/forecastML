% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train_model.R
\name{predict.forecast_model}
\alias{predict.forecast_model}
\title{Predict on validation datasets or forecast}
\usage{
\method{predict}{forecast_model}(..., prediction_function = list(NULL),
  data_forecast = NULL)
}
\arguments{
\item{...}{One or more trained models from \code{train_model()}.}

\item{prediction_function}{A list of user-defined prediction functions. See the example below for details.}

\item{data_forecast}{If \code{NULL}, predictions are returned for the validation datasets in each 'forecast_model' in .... If
an object of class 'lagged_df' from \code{create_lagged_df(..., type = "forecast")}, forecasts from 1:h.}
}
\value{
If \code{data_forecast = NULL}, an S3 object of class 'training_results' object. If
\code{data_forecast = create_lagged_df(..., type = "forecast")}, an S3 object of class 'forecast_results'.
}
\description{
Predict with a 'forecast_model' object from \code{train_model()}. If \code{data_forecast = NULL},
predictions are returned for the outer-loop nested cross-validation datasets.
If \code{data_forecast} is an object of class 'lagged_df' from \code{create_lagged_df(..., type = "forecast")},
predictions are returned for the horizons specified in \code{create_lagged_df()}.
}
\examples{
\donttest{
# Sampled Seatbelts data from the R package datasets.
data("data_seatbelts", package = "forecastML")

# Example - Training data for 2 horizon-specific models w/ common lags per predictor.
horizons <- c(1, 12)
lookback <- 1:15

data_train <- create_lagged_df(data_seatbelts, type = "train", outcome_cols = 1,
                               lookback = lookback, horizon = horizons)

windows <- create_windows(data_train, window_length = 12)

# User-define model - LASSO
# The model takes in a data.frame with a target and predictors with exactly the same format as
# in create_lagged_df(). 'outcome_cols' is the column index of the target. The
# model returns a model object suitable for a predict-type function.
library(glmnet)
model_function <- function(data, outcome_cols = 1) {

  x <- data[, -(outcome_cols), drop = FALSE]
  y <- data[, outcome_cols, drop = FALSE]
  x <- as.matrix(x, ncol = ncol(x))
  y <- as.matrix(y, ncol = ncol(y))

  model <- glmnet::cv.glmnet(x, y)
  return(model)
}

model_results <- train_model(data_train, windows,
                             model_function, model_name = "LASSO")

# User-defined prediction function - LASSO
# The predict() wrapper takes two positional arguments. First,
# the returned model from the user-defined modeling function (model_function() above).
# Second, a data.frame of predictors--lagged predictors will be created automatically
# using create_lagged_df().
prediction_function <- function(model, data_features) {

  x <- as.matrix(data_features, ncol = ncol(data_features))

  data_pred <- data.frame("y_pred" = predict(model, x, s = "lambda.min"))
  return(data_pred)
}

# Predict on the validation datasets.
data_valid <- predict(model_results, prediction_function = list(prediction_function))

# Forecast.
data_forecast <- create_lagged_df(data_seatbelts, type = "forecast", outcome_cols = 1,
                                  lookback = lookback, horizon = horizons)
data_forecasts <- predict(model_results, prediction_function = list(prediction_function),
                          data_forecast = data_forecast)
}
}
